clear
set verbose off
set warnings off

# SETTINGS
#==========

DIR_WORK = getenv("DIR_WORK")  # read out variable passed from bash script

if DIR_WORK == ""
    # <SET_PATH_HERE> e.g. "/home/git_project"
    # string DIR_WORK = "/home/pi/git/covid_19_forecast"
    DIR_WORK = "/home/at/git/covid_19_forecast"
endif
string DATA_URL = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
string INITIAL_DATE = "2020-01-22"			# 1st available observation of CSSE dataset
scalar MINIMUM_CASES = 30					# Minimal number of confirmed cases at latest observation for consideration
string SAVE_PLOT_AS = "png"					# grpahic format: "png", "pdf"", eps"

# ARIMA model settings -- see auto_arima package: http://ricardo.ecn.wfu.edu/gretl/cgi-bin/current_fnfiles/auto_arima.gfn
bundle ARIMA_OPTS = null
scalar ARIMA_OPTS.MAX_HORIZON = 7           # max. multi-step OoS forecast horizon
# optimize by information criteria, either aic, aicc, bic or hqc
string ARIMA_OPTS.INFO_CRIT = "aicc"
scalar ARIMA_OPTS.min_p = 0					# autoregressive (AR) order
scalar ARIMA_OPTS.max_p = 4                 # autoregressive (AR) order
scalar ARIMA_OPTS.min_d = 0                 # differencing order
scalar ARIMA_OPTS.max_d = 2                 # differencing order
scalar ARIMA_OPTS.min_q = 0                 # moving average (MA) order
scalar ARIMA_OPTS.max_q = 1                 # moving average (MA) order

scalar ARIMA_OPTS.min_P = 0                 # seasonal autoregressive (AR) order
scalar ARIMA_OPTS.max_P = 1                 # seasonal autoregressive (AR) order
scalar ARIMA_OPTS.min_D = 0                 # seasonal differencing order
scalar ARIMA_OPTS.max_D = 0                 # seasonal differencing order
scalar ARIMA_OPTS.min_Q = 0                 # seasonal MA order
scalar ARIMA_OPTS.max_Q = 1                 # seasonal MA order

#===================
if DIR_WORK != ""
    set workdir @DIR_WORK
endif


# include helper functions
include "./src/helper.inp"

# 3rd party libraries
catch include auto_arima.gfn                # load into memory
if $error
    pkg install auto_arima                  # download from package server
    include auto_arima.gfn
endif



# Download and open latest dataset
open @DATA_URL --preserve --quiet

# drop unnecessary series
list variables_to_drop = Lat Long
delete variables_to_drop

# Data is arranged "by variable" -- construct a panel
scalar N = $nobs					# cross-sectional dimension
scalar T = time_dimension(dataset)	# time dimension

# Add future observations + stack data set + define panel
list newobs_series = add_future_observations(dataset, ARIMA_OPTS.MAX_HORIZON)
list L = v*
catch series confirmed_cases = stack(L, $nobs)		# yields stacked cross-section dataset
if $error
	print "stack() command failed. You need to update to gretl version 2020b."
	stop
endif
delete L --force
setobs N 1:1 --stacked-cross-section


# Fill gaps in country series
series country = fill_panel_gaps_of_constant(CountryRegion)
series province = fill_panel_gaps_of_constant(ProvinceState)

strings country_names = get_distinct_names(CountryRegion)
strings province_names = get_distinct_names(ProvinceState)

# attach country + province names to series
stringify(country, country_names)
stringify(province, province_names)


# Clean up
list drop = ProvinceState CountryRegion
delete drop

genr unit			# cross-sectional index series
genr time
print_panel_details()


#=========
strings countries_ok = array()
strings provinces_ok = array()

series log_confirmed_cases = (confirmed_cases > 0) ? \
                             log(confirmed_cases) : log(1 + confirmed_cases)



# Expost: Compute ARIMA based forecasts for each country-province combination
#============================================================================
smpl full
loop i=1..2

    # define time-series set for each country-province
    smpl unit == $i --restrict --replace
    setobs 7 @INITIAL_DATE --time-series

    string country_name = strvals(country)[values(country)]
    string province_name = "" # for some countries data on province level is not available
    if sum(ok(province))
        string province_name = strvals(province)[values(province)]
    endif


    printf "INFO: Start analysis for country '%s' and province '%s'.\n\n",\
            country_name, province_name
    flush

    scalar sufficient_cases_lastly = confirmed_cases[$tmax - ARIMA_OPTS.MAX_HORIZON] > MINIMUM_CASES
    scalar has_minimum_nobs = nobs(confirmed_cases) >= 20


    if sufficient_cases_lastly == FALSE || has_minimum_nobs == FALSE
        printf "Country '%s' (province '%s') has currently less\n\
                than %d confirmed cases OR less than 20 valid observations.\n\
                Ignore.", country_name, province_name, MINIMUM_CASES
    else

        # Expost analysis + plot multistep interval forecasts
        string model_properties = ""
        list FC = do_forecast(confirmed_cases, null, ARIMA_OPTS,\
                              &model_properties)

        if inlist(FC, "confirmed_cases") && inlist(FC, "fc_point") && \
            inlist(FC, "fc_se")

            setobs 7 @INITIAL_DATE --time-series
            string date_of_information = obslabel($t2 - ARIMA_OPTS.MAX_HORIZON)
            string label = sprintf("Conditional on %s", date_of_information)
            setinfo fc_point --graph-name="@label"

            string title = sprintf("%s - %s [%s, 90\% forecast interval]", \
              country_name, province_name, model_properties)

            string filename = sprintf("./figures/%s.%s", \
              filename_forecast_plot(country_name, province_name, ARIMA_OPTS.MAX_HORIZON, 1), SAVE_PLOT_AS)


            summary confirmed_cases  # for debugging only

            plot_forecast(confirmed_cases, fc_point, fc_se, title, filename)

        else

            printf "\nWarning: Target series includes only zeros for %s %s.\n\
              No ARIMA model will be fitted.\n", country_name, province_name
            flush
        endif

    endif
endloop
smpl full
