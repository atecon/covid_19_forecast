function string download_current_csv_as_str (const string URL)
    /* Load raw csv holding latest data. Return string holding information. */

    bundle req
    string req.URL = URL
    scalar err = curl(&req)
    if err
        funcerr(sprintf("Failed to download from URL:\n%s\n", URL))
    else
        return req.output
    endif
end function

function string process_date_header (const string data_raw)
    /* Headers for dates are in format %m/%d/%y. These cannot be read 
    by gretl due to the "/" char. We substitute this header. */
    
    string match = "(\d+)/(\d+)/(\d{2})"
    string repl = "date_20\3-\1-\2"
    return regsub(data_raw, match, repl)
end function


function string data_string_to_file (const string data_string)
    string name_tmp_file
    outfile --tempfile=name_tmp_file
        print data_string
    end outfile
    printf "Output went to %s\n", name_tmp_file

    return name_tmp_file
end function

function strings get_country_names (const series CountryRegion)
    /* Retrieve country/region names and process strings. */
    strings countries = strvals(CountryRegion)
    loop foreach i countries -q
        string str = tolower(strstrip(countries[i]))
        str = strsub(str, " ", "_")
        countries[i] = str
    endloop

    return countries
end function

function void print_countries (const strings countries)
    printf "\nData covers the following countries/ regions:\n"
    loop foreach i countries -q
        printf "\n$i"
    endloop
end function

function string aggregate_data_and_store_csv (const list data_values)
/* Each row of a series refers to confirmed cases in the i-th region,
      and each series captures the confirmed cases over time. */

    matrix mat = {data_values}
    matrix daily_sums = sumc(mat)'
    matrix non_zero_regions_per_day = sumc((mat .> 0))'
    daily_sums ~= non_zero_regions_per_day

    printf "\nData includes information over %d days\n", rows(daily_sums)
    cnameset(daily_sums, "cases_confirmed non_zero_regions")
    string filename = "aggregated_timeseries.csv"
    mat2data(daily_sums, "aggregated_timeseries.csv")
    printf "Succesfully stored aggregated data in file:\n\
      %s/%s", $workdir, filename

    return filename
end function

function void arima_forecast (const series y,
                              const int p[0::],
                              const int d[0::],
                              const int q[0::],
                              const int MAX_HORIZON[1::])
    /* Estimate arima type of model and forecast
    out-of-sample. */

    smpl ; -MAX_HORIZON
    arima p q d ; y

    # Plot multistep  interval forecasts
    fcast --out-of-sample --dynamic
    smpl full
    series fc_point = $fcast
    series fc_se = $fcse    
    list L = y fc_point
    plot L
        options with-lines time-series single-yaxis
        options band-style=fill
        options band=fc_point,fc_se,1.69726
        printf "set ylabel \"%s\"", argname(y)
        printf "set title \"Confirmed cases (ARIMA(%d,%d,%d), 90\% forecast interval)\"", \
          p, d, q
    end plot --output=display
end function

# FIXME: deprecated??
function matrix get_dates (const list date_series)
    /* Read out series name of date series, and retrieve the 
    date integer (ISO8601 style). */

    matrix mdate = NA * zeros(nelem(date_series))
    loop foreach i date_series -q
        mdate[i] = atof(strsub(varnames(date_series)[i], "date_", ""))
    endloop
    
    return mdate
end function
