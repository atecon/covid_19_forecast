clear
set verbose off

# SETTINGS
#==========
string DIR_WORK = "/home/pi/git/covid_19_forecast" 	#"" 		# <SET_PATH_HERE> e.g. "/home/git_project"
string DATA_URL = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
string INITIAL_DATE = "2020-01-22"			# 1st available observation of CSSE dataset
scalar MINIMUM_CASES = 30					# Minimal number of confirmed cases at latest observation for consideration
string SAVE_PLOT_AS = "png"					# grpahic format: "png", "pdf"", eps"

# ARIMA model settings -- see auto_arima package: http://ricardo.ecn.wfu.edu/gretl/cgi-bin/current_fnfiles/auto_arima.gfn
bundle ARIMA_OPTS = null
scalar ARIMA_OPTS.MAX_HORIZON = 7           # max. multi-step OoS forecast horizon
# optimize by information criteria, either aic, aicc, bic or hqc
string ARIMA_OPTS.INFO_CRIT = "aicc"
scalar ARIMA_OPTS.min_p = 0					# autoregressive (AR) order
scalar ARIMA_OPTS.max_p = 4                 # autoregressive (AR) order
scalar ARIMA_OPTS.min_d = 0                 # differencing order
scalar ARIMA_OPTS.max_d = 2                 # differencing order
scalar ARIMA_OPTS.min_q = 0                 # moving average (MA) order
scalar ARIMA_OPTS.max_q = 1                 # moving average (MA) order

scalar ARIMA_OPTS.min_P = 0                 # seasonal autoregressive (AR) order
scalar ARIMA_OPTS.max_P = 1                 # seasonal autoregressive (AR) order
scalar ARIMA_OPTS.min_D = 0                 # seasonal differencing order
scalar ARIMA_OPTS.max_D = 0                 # seasonal differencing order
scalar ARIMA_OPTS.min_Q = 0                 # seasonal MA order
scalar ARIMA_OPTS.max_Q = 1                 # seasonal MA order

# not relevant for forecasting!
scalar COMPILE_MARKDOWN_CMD = 1				# compile markdown command for inserting forecasting plots to README.md
#===================

if DIR_WORK != ""
    set workdir @DIR_WORK
endif


# include helper functions
include "./src/helper.inp"

# 3rd party libraries
catch include auto_arima.gfn                # load into memory
if $error
    pkg install auto_arima                  # download from package server
    include auto_arima.gfn
endif


# Download and open latest dataset
open @DATA_URL --preserve --quiet

# drop unnecessary series
list variables_to_drop = Lat Long
delete variables_to_drop

# Data is arranged "by variable" -- construct a panel
scalar N = $nobs					# cross-sectional dimension
scalar T = time_dimension(dataset)	# time dimension

# Add future observations + stack data set + define panel
list newobs_series = add_future_observations(dataset, ARIMA_OPTS.MAX_HORIZON)
list L = v*
catch series confirmed_cases = stack(L, $nobs)		# yields stacked cross-section dataset
if $error
	print "stack() command failed. You need to update to gretl version 2020b."
	stop
endif
delete L --force
setobs N 1:1 --stacked-cross-section



# Fill gaps in country series
series country = fill_panel_gaps_of_constant(CountryRegion)
series province = fill_panel_gaps_of_constant(ProvinceState)

strings country_names = get_distinct_names(CountryRegion)
strings province_names = get_distinct_names(ProvinceState)

# attach country + province names to series
stringify(country, country_names)
stringify(province, province_names)


# Clean up
list drop = ProvinceState CountryRegion
delete drop

genr unit			# cross-sectional index series
genr time
print_panel_details()



# ANALYSIS
#=========
strings countries_ok = defarray()
strings provinces_ok = defarray()

series log_confirmed_cases = log(confirmed_cases)

string filename = sprintf("./figures/boxplot_log_confirmed_cases_by_time.%s", SAVE_PLOT_AS)
boxplot log_confirmed_cases time --factorized \
  --output="@filename"
string filename = sprintf("./figures/boxplot_log_confirmed_cases_by_unit.%s", SAVE_PLOT_AS)
boxplot log_confirmed_cases unit --factorized \
  --output="@filename"

#panplot log_confirmed_cases --overlay --output=display

#gnuplot cases_confirmed non_zero_regions \
#  --time-series --with-lines --output=display

# Expost: Compute ARIMA based forecasts for each country-province combination
#============================================================================
smpl full
loop i=min(unit)..max(unit) --quiet

    # define time-series set for each country-province
    smpl full
    setobs unit time --panel-vars
    smpl unit == $i && ok(confirmed_cases) --restrict
    setobs 7 @INITIAL_DATE --time-series

    string country_name = strvals(country)[values(country)]

    if sum(ok(province))	# for some countries data on province level not available
        string province_name = strvals(province)[values(province)]
    else
        string province_name = ""
    endif
    if confirmed_cases[$tmax] < MINIMUM_CASES
        printf "Country '%s' and province '%s' has\n\
          currently less than %d confirmed cases.\n", country_name, province_name, MINIMUM_CASES
    else
        printf "Start forecasting for:\n\
          country '%s' and province '%s'\n", country_name, province_name

        # Expost analysis + plot multistep interval forecasts
        string model_properties = ""
        list FC = do_forecast(confirmed_cases, , ARIMA_OPTS, &model_properties)

        if nelem(FC) == 0
            printf "\nWarning: Target series includes only zeros for %s %s.\n\
              No ARIMA model will be fitted.\n", country_name, province_name
        else
            setobs 7 @INITIAL_DATE --time-series
            string date_of_information = obslabel($t2 - ARIMA_OPTS.MAX_HORIZON)
            string label = sprintf("Conditional on %s", date_of_information)
            setinfo fc_point --graph-name="@label"

            string title = sprintf("%s - %s [%s, 90\% forecast interval]", \
              country_name, province_name, model_properties)

            string filename = sprintf("./figures/%s.%s", \
              filename_forecast_plot(country_name, province_name, ARIMA_OPTS.MAX_HORIZON, 1), SAVE_PLOT_AS)

            plot_forecast(confirmed_cases, fc_point, fc_se, title, filename)
        endif
    endif
endloop
smpl full


# Out-of-sample for the forthcoming days for each country-province combination
#=============================================================================
smpl full
loop i=min(unit)..max(unit) --quiet

    # define time-series set for each country-province
    smpl full
    setobs unit time --panel-vars
    smpl unit == $i --restrict
    setobs 7 @INITIAL_DATE --time-series

    string country_name = strvals(country)[values(country)]
    if sum(ok(province))	# for some countries data on province level are not available
        string province_name = strvals(province)[values(province)]
    else
        string province_name = ""
    endif

    if confirmed_cases[$tmax - ARIMA_OPTS.MAX_HORIZON] < MINIMUM_CASES
        printf "Country '%s' and province '%s' has\n\
          currently less than %d confirmed cases.\n", country_name, province_name, MINIMUM_CASES
    else
        printf "Start forecasting for:\n\
          country '%s' and province '%s'\n", country_name, province_name

        # Out-of-sample analysis + plot multistep interval forecasts
        string model_properties = ""
        list FC = do_forecast(confirmed_cases, , ARIMA_OPTS, &model_properties)

        if nelem(FC) == 0
            printf "\nWarning: Target series includes only zeros for %s %s.\n\
              No ARIMA model will be fitted.\n", country_name, province_name
        else
            setobs 7 @INITIAL_DATE --time-series
            string date_of_information = obslabel($t2 - ARIMA_OPTS.MAX_HORIZON)
            string label = sprintf("Conditional on %s", date_of_information)
            setinfo fc_point --graph-name="@label"

            string title = sprintf("%s - %s [%s, 90\% forecast interval]", \
              country_name, province_name, model_properties)
            string filename = sprintf("./figures/%s.%s", \
              filename_forecast_plot(country_name, province_name, ARIMA_OPTS.MAX_HORIZON, 0), SAVE_PLOT_AS)
            plot_forecast(confirmed_cases, fc_point, fc_se, title, filename)

            countries_ok += sprintf("%s", country_name)
            provinces_ok += sprintf("%s", province_name)

            string title = sprintf("New cases per day in %s - %s [%s]", \
              country_name, province_name, model_properties)
            string filename = sprintf("./figures/%s.%s", \
              filename_change_plot(country_name, province_name, ARIMA_OPTS.MAX_HORIZON), SAVE_PLOT_AS)
            plot_change_in_y_and_fc(confirmed_cases, fc_point, title, filename)

        endif
    endif
endloop


if COMPILE_MARKDOWN_CMD # commands for showingh plots in README.md
    string mdc = compile_markdown_plot_cmd("./figures", countries_ok, \
      provinces_ok, ARIMA_OPTS.MAX_HORIZON, SAVE_PLOT_AS)
    outfile "markdown_cmd.txt" --quiet
        print mdc
    end outfile
endif



printf "\nAnalysis finished.\n\n"
quit
